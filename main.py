from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel
from jose import jwt, JWTError
from datetime import datetime, timedelta
from passlib.context import CryptContext

# ---------------------------------------------------
# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JWT
# ---------------------------------------------------
SECRET_KEY = "supersecretkey123"   # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –¥–ª–∏–Ω–Ω—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É!
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60    # –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å 60 –º–∏–Ω—É—Ç

# –°—Ö–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ HTTP Bearer (–¥–ª—è Swagger UI)
bearer_scheme = HTTPBearer()

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è bcrypt (–¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è)
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# ¬´–§–µ–π–∫–æ–≤–∞—è¬ª –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (email ‚Üí bcrypt-—Ö–µ—à –ø–∞—Ä–æ–ª—è)
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –±—ã –±—Ä–∞–ª–∏ –∏–∑ –ë–î, –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
fake_users_db: dict[str, str] = {
    # –ü–∞—Ä–æ–ª—å –¥–ª—è alice@example.com = "secret123"
    # (—Ö–µ—à–∏—Ä–æ–≤–∞–ª –∑–∞—Ä–∞–Ω–µ–µ: bcrypt.hash("secret123"))
    "alice@example.com": "$2b$12$7QJH5WgNVv6JjaUbv1CIsewoif4fglRU/5iN9BnzEJI7frUeFSVM."
}
# –≠–º—É–ª–∏—Ä—É–µ–º, —á—Ç–æ —É –∫–∞–∂–¥–æ–≥–æ email –µ—Å—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID (email ‚Üí id)
fake_user_id: dict[str, int] = {
    "alice@example.com": 1
}


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ plain_password —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç bcrypt-—Ö–µ—à—É hashed_password.
    """
    return pwd_context.verify(plain_password, hashed_password)


def create_access_token(data: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT, –±–µ—Ä—ë—Ç –ø–æ–ª—è –∏–∑ data (–æ–∂–∏–¥–∞–µ—Ç—Å—è data["sub"] = email),
    –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ payload –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è (exp) –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç.
    """
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)


def verify_token(
    credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme)
) -> str:
    """
    –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Bearer-—Ç–æ–∫–µ–Ω–∞:
    ‚Ä¢ FastAPI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç–∞—ë—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization: Bearer <JWT>,
      ‚Äú–æ—Ç—Ä–µ–∑–∞–µ—Ç‚Äù –ø—Ä–µ—Ñ–∏–∫—Å –∏ –æ—Ç–¥–∞—ë—Ç –æ—Å—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ credentials.credentials.
    ‚Ä¢ –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ –ø–æ–ª–µ "sub" (email).
    ‚Ä¢ –ï—Å–ª–∏ –≤—Å—ë –æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º email; –∏–Ω–∞—á–µ –∫–∏–¥–∞–µ–º HTTPException(401).
    Swagger UI —É–≤–∏–¥–∏—Ç, —á—Ç–æ —ç—Ç–æ—Ç endpoint –∏–ª–∏ —Ä–æ—É—Ç–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç HTTPBearer,
    –∏ —Å–∞–º –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫—É ‚ÄúAuthorize‚Äù (üîì) –≤ /docs.
    """
    token = credentials.credentials
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    except JWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Could not validate credentials"
        )
    email: str = payload.get("sub")
    if not email:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Could not validate credentials"
        )
    return email  # –¢–µ–ø–µ—Ä—å –≤—Å–µ —Ä–æ—É—Ç—ã —Å Depends(verify_token) –ø–æ–ª—É—á–∞—é—Ç —Ç–µ–∫—É—â–∏–π email


# ---------------------------------------------------
# 2. Pydantic-—Å—Ö–µ–º—ã –¥–ª—è –ª–æ–≥–∏–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
# ---------------------------------------------------
class UserLogin(BaseModel):
    email: str
    password: str

class TokenResponse(BaseModel):
    access_token: str
    token_type: str


# ---------------------------------------------------
# 3. –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# ---------------------------------------------------
app = FastAPI()


@app.post("/auth/login", response_model=TokenResponse, tags=["auth"])
def login(user_data: UserLogin):
    """
    POST /auth/login
    Body (JSON): { "email": "...", "password": "..." }
    –ï—Å–ª–∏ email –µ—Å—Ç—å –≤ fake_users_db –∏ –ø–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç (–ø—Ä–æ–≤–µ—Ä–∫–∞ bcrypt),
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"access_token": <jwt>, "token_type": "bearer"}.
    –ò–Ω–∞—á–µ ‚Äî HTTP 401.
    """
    hashed_pw = fake_users_db.get(user_data.email)
    if not hashed_pw or not verify_password(user_data.password, hashed_pw):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid credentials"
        )
    access_token = create_access_token({"sub": user_data.email})
    return {"access_token": access_token, "token_type": "bearer"}


@app.get("/auth/me", tags=["auth"])
def read_users_me(email: str = Depends(verify_token)):
    """
    GET /auth/me
    –ó–∞–≥–æ–ª–æ–≤–æ–∫: Authorization: Bearer <jwt>
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { "email": email, "id": fake_user_id[email] }.
    –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –≤–µ—Ä–Ω—ë—Ç 401 Not authenticated.
    """
    return {"email": email, "id": fake_user_id.get(email)}


# ---------------------------------------------------
# 4. –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ ads.py
# ---------------------------------------------------
import ads  # –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: —Ñ–∞–π–ª ads.py **–¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å —Ä—è–¥–æ–º** —Å —ç—Ç–∏–º main.py
app.include_router(ads.router)
