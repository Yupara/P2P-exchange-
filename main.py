# main.py

from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from jose import jwt, JWTError
from datetime import datetime, timedelta
from pydantic import BaseModel
from passlib.context import CryptContext

# ========== 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JWT ==========

SECRET_KEY = "supersecretkey123"    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –¥–ª–∏–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60     # –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–∫–µ–Ω –∂–∏–≤—ë—Ç 60 –º–∏–Ω—É—Ç

# –ü–∞–π–ø–ª–∞–π–Ω –¥–ª—è bcrypt-–ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# –°—Ö–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Swagger:
bearer_scheme = HTTPBearer()

# ¬´–§–µ–π–∫–æ–≤–∞—è¬ª –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (email ‚Üí bcrypt-—Ö–µ—à)
fake_users_db: dict[str, str] = {
    "alice@example.com": "$2b$12$7QJH5WgNVv6JjaUbv1CIsewoif4fglRU/5iN9BnzEJI7frUeFSVM."
}
# email ‚Üí id (—ç–º—É–ª—è—Ü–∏—è)
fake_user_id: dict[str, int] = {
    "alice@example.com": 1
}

# ========== 2. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==========

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

def create_access_token(data: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Å–æ —Å—Ä–æ–∫–æ–º –∂–∏–∑–Ω–∏ ACCESS_TOKEN_EXPIRE_MINUTES.
    –ö–ª–∞–¥—ë—Ç –≤ payload –ø–æ–ª–µ "sub" = data["sub"].
    """
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    token = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return token

def verify_token(
    credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme)
) -> str:
    """
    –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫:
      Authorization: Bearer <–≤–∞—à_JWT>
    - –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å, exp –∏ —Ç. –¥.)
    - –ë–µ—Ä—ë—Ç –∏–∑ payload –ø–æ–ª–µ "sub" (email)
    - –ï—Å–ª–∏ –≤—Å—ë –æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç email
    - –ò–Ω–∞—á–µ –∫–∏–¥–∞–µ—Ç HTTPException(401)
    
    –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–æ–º—É, —á—Ç–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–æ–∏—Ç Depends(bearer_scheme),
    Swagger UI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ä–∏—Å—É–µ—Ç –∫–Ω–æ–ø–∫—É ¬´Authorize¬ª (üîì) –∏ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º
    –≤—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω.
    """
    token = credentials.credentials
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    except JWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Could not validate credentials"
        )
    email: str = payload.get("sub")
    if not email:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Could not validate credentials"
        )
    return email


# ========== 3. –°—Ö–µ–º—ã Pydantic ==========

class UserLogin(BaseModel):
    email: str
    password: str

class TokenResponse(BaseModel):
    access_token: str
    token_type: str


# ========== 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FastAPI ==========

app = FastAPI(title="P2P Exchange API")


@app.post("/auth/login", response_model=TokenResponse, tags=["auth"])
def login(user_data: UserLogin):
    """
    POST /auth/login
    Body (JSON):
      {
        "email": "...",
        "password": "..."
      }
    –ï—Å–ª–∏ email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JWT.
    """
    hashed_pw = fake_users_db.get(user_data.email)
    if not hashed_pw or not verify_password(user_data.password, hashed_pw):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid credentials"
        )
    access_token = create_access_token({"sub": user_data.email})
    return {"access_token": access_token, "token_type": "bearer"}


@app.get("/auth/me", tags=["auth"])
def get_current_user(email: str = Depends(verify_token)):
    """
    GET /auth/me
    –¢—Ä–µ–±—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫: Authorization: Bearer <JWT>.
    –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –≤–µ—Ä–Ω—ë—Ç—Å—è { "email": email, "id": fake_user_id[email] }.
    """
    return {"email": email, "id": fake_user_id.get(email)}


# ========== 5. –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π ==========

